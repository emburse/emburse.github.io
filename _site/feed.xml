

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4000/</id>
  <title>Emburse Engineering Blog</title>
  <subtitle>'Share, learn, innovate: A Blog for Emburse Engineering'</subtitle>
  <updated>2022-06-01T18:54:49+00:00</updated>
  <author>
    <name>Emburse</name>
    <uri>http://0.0.0.0:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://0.0.0.0:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator>
  <rights> Â© 2022 Emburse </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>What are kubernetes deployments</title>
    <link href="http://0.0.0.0:4000/posts/deployments/" rel="alternate" type="text/html" title="What are kubernetes deployments" />
    <published>2022-06-01T00:00:00+00:00</published>
  
    <updated>2022-06-01T00:00:00+00:00</updated>
  
    <id>http://0.0.0.0:4000/posts/deployments/</id>
    <content src="http://0.0.0.0:4000/posts/deployments/" />
    <author>
      <name>{"name"=>"Robert Kozak"}</name>
    </author>

  
    
    <category term="kubernetes" />
    
    <category term="deployment resource" />
    
  

  
    <summary>
      





      What are kubernetes deployments?



Deployment resource



Kubernetes resources describes the desired state of pods in the kubernetes cluster

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: ops-system
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
...
    </summary>
  

  </entry>

  
  <entry>
    <title>How not to terraform - AWS security groups</title>
    <link href="http://0.0.0.0:4000/posts/how-not-to-terraform-security-groups/" rel="alternate" type="text/html" title="How not to terraform - AWS security groups" />
    <published>2022-02-25T00:00:00+00:00</published>
  
    <updated>2022-06-01T18:41:37+00:00</updated>
  
    <id>http://0.0.0.0:4000/posts/how-not-to-terraform-security-groups/</id>
    <content src="http://0.0.0.0:4000/posts/how-not-to-terraform-security-groups/" />
    <author>
      <name>{"name"=>"Bevan Bennett"}</name>
    </author>

  
    
    <category term="blog" />
    
    <category term="terraform" />
    
    <category term="aws" />
    
    <category term="howto" />
    
    <category term="hownotto" />
    
  

  
    <summary>
      





        
Being an exploration of the many ways to manage AWS security groups using terraform and some of the corresponding gotchas you are likely to encounter.


 Our scenario 
For this discussion, imagine the following scenario.
We have a webservice in an AWS VPC that we want to allow restricted access to. This webservice is part of production infrastructure and needs to be accessible from other sys...
    </summary>
  

  </entry>

</feed>


